API CRUD: 

	1. Create 
	2. Read 
	3. Update
	4. Delete

CRUD: Productos

	- Modelo de Produto: (cod, nombre, categoria, precio, stock)


	MYSQL: FORMA 1
		Producto: (cod, nombre, codCategoria, precio, stock)
		Categoria: (cod, nombre)

	MYSQL: FORMA 2
		Producto: (cod, nombre, precio, stock)
		Categoria: (cod, nombre)

		producto_categoria: (codProdcuto, codCategoria)


	NOSQL

	{
		"cod":"ABC123",
		"nombre": "Manzana",
		"categoria": {
			"cod":"CAT123",
			"nombre":"Frutas"
		},
		"precio":100,
		"stock": {
			"existe": true, 
			"cantidad": 105
		}
	}

	- API: Todo el backend
	- Servicio: (metodo, ruta)
		- GET /usuarios/all


	SERVICIOS
		- GET /productos: Obtener todos los productos de un archivo
		- GET /productos/:code ":code" va a ser el parametro para buscar el producto por su codigo
			- GET /productos/ABC123 -> Me trae Manzana 


	- GET /productos 		-> getAllProductos()
	- GET /productos/:code  -> getProductByCode(code, arr)

	Design pattern: Factory

	CREATE / UPDATE / DELETE

		- POST /productos/stock/consulta

			{
				"cod": "ABC123",
				"cantidad": 10
			}

			{
				"stockDisponible": true 
			}

		- PUT /productos/stock/ingreso

			Request:

			{
				"cod":"ABC123",
				"cantidad": 100
			}

			Response: 

			{
				"cod": "ABC123",
				"stock": {
					"cantidad": 205
				}
			}

		- DELETE /productos/stock/egreso/:code/:cantidad
			- Ejemplo: /productos/stock/egreso/ABC123/5

			Response: 

				{
					"cod": "ABC123",
					"stock": {
						"cantidad": 100
					}
				}

	TAREA 

		1. Crear un servicio CRUD del modelo
			Stock: (id, producto, cliente, cantidad, precio)

			NOSQL
			[
				{
					id: 10,
					producto: {
						nombre: "Manzana",
						categoria: {
							nombre: "Frutas"
						}
					},
					cliente: {
						nombre: "Alex",
						esEmpresa: false
					},
					cantidad: 10,
					precio: 100
				}
			]

			SERVICIOS: 

				- Obtener items de stock
				- Obtener item por ID
				- Calcular el total de todos los items de stock
				- Buscar items por el nombre del producto
				- Buscar items por el cliente
				- Calcular el total por cliente

					Respuesta:
					[
						{
							cliente: "Alex",
							total: 20
						},
						{
							cliente: "Juan",
							total: 100
						}
					]
				- Calcular el total por producto

					Respuesta:
					[
							{
								producto: "Manzana",
								total: 20
							},
							{
								producto: "Pera",
								total: 100
							}
					]

			- TODOS LOS SERVICIOS EN UN POSTMAN para que pueda probar