- Base de datos NOSQL 
	- MongoDB: Base de datos orientado a documentos
	- Contempla el paradigma CRUD: Create/Reade/Update/Delete


	NOSQL / SQL

	NOSQL: Es un modelo de datos referencial
	SQL: Es un modelo de datos relacional


	Tienda online: 
		- Productos
		- Clientes

	SQL: 
		Producto: (id, nombre, precio)
			-> (1, Manzana, 10)
		
		Cliente: (id, nombre, tipo) -> tipo: ['final','empresa']
			-> (1, Alex, final)

		Compras: (idProducto, idCliente, cantidad)
			-> (1, 1, 10)

		Que se compro (Usuario): 
			-> (Manzana, Alex, 10, Total: 100)

	BASE SQL ---> API ---> GET /compras
		
		[
			{
				idProducto: 1,
				idCliente: 1,
				cantidad: 10
			}
		]

	BASE SQL ---> API ---> GET /producto/1

		[
			{
				id: 1,
				nombre: Manzana,
				precio: 10
			}
		]

	BASE SQL ---> API ---> GET /cliente/1

		[
			{
				id: 1, 
				nombre: Alex,
				tipo: final
			}
		]

	BASE SQL ---> API ---> GET /compras (completo)

		[
			{
				producto: Manzana,
				cliente: Alex, 
				total: 100
			}
		]


		Una coleccion: Clientes: 

			[
				{
					id:1,
					nombre: Alex, 
					tipo: final
				}
			]

		Una coleccion: Productos:

			[
				{
					id: 1, 
					nombre: Manzana,
					precio: 10
				}
			]

		Coleccion de Compras:

			[
				{
					producto: {
						id: 1,
						nombre: Manzana,
						precio: 10
					},
					cliente: {
						id: 1,
						nombre: Alex,
						tipo: final
					},
					cantidad: 10,
					total: 100 
				}
			]

	- Motor de base de datos MongoDB: 
		- Servicio de mongodb: https://docs.mongodb.com/v4.4/tutorial/install-mongodb-on-windows-unattended/
		- Gestor de base de datos: https://robomongo.org
		- Documentacion: https://docs.mongodb.com/manual/tutorial/query-documents/


	- Schema: 
		Modelo o esqueleto de nuestra coleccion: 
			- Conceptualmente que es ese modelo 
			- Propiedades 
			- Tipo de dato de los valores 

			Producto: (id, nombre, precio, vencido)

			{
				id: ObjectId, 
				nombre: String, 
				precio: Double,
				vencido: Boolean
			}


			POST /productos

				{
					nombre: "Manzana",
					precio: 10.23,
					vencido: false, 
					categoria: "Frutas" (x)
				}

			Dos posibilidades: 
				- Da error y no deja insertar (x)
				- O inserta el modelo parcialmente

		----

		Schema de clientes: 
			
			{
				id: ObjectId,
				nombre: String,
				tipo: Array (Array de String)
			}

		----

		Schema de Compras: 

			{
				cantidad: Int32,
				total: Double,
				producto: Object : {
					nombre: String, 
					precio: Double
				},
				cliente: Object : {
					nombre: String,
					tipo: Array
				}
			}

	OPERACIONES CRUD: 

	1. Create: 

		[Base de datos].[coleccion].[metodo]
			- Metodos: 
				- insertOne({...})
				- insertMany([{...}, {...}, ...])

		Insertamos un documento: 

		db.clientes.insertOne({
			"nombre":"Pedro",
			"tipo":"final"
		})

		Insertar varios documentos al mismo tiempo:

		db.clientes.insertMany([
			{
				"nombre":"Pedro",
				"tipo":"empresa"
			},
			{
				"nombre":"Juan Martin",
				"tipo":"final"
			}
		])

	2. Read:
		- Quiero buscar todos los clientes que sean empresa:
			
			[base de datos].[metodo](coleccion).[metodo: find](obj)

			db.getCollection('clientes').find({
				tipo: "empresa"
			})

		- Quiero encontrar las compras que hizo "Alex"

			MongoDB 4.4:

			db.getCollection('compras').find({
				cliente: { nombre: "Alex"}
			})

			Para versiones anteriores de MongoDB: 

			db.getCollection('compras').find({
				'cliente.nombre': "Alex"
			})

	COMO FUNCIONA LA OPERACION DE CREAR: 

									|- [ ERROR ] ---> [ ERROR DE UI ]
									|
	[ COMANDO DE SHELL ] ---> [ MOTOR DE MONGODB ] 
									|
									|- [ SUCCESS ] --- > [ RESULTADO ]


	EL RESULTADO (OP. LINEAL) NOS DEVUELVE UN OBJ CON DOS PROPIEDADES: 

	{
	    "acknowledged" : true,
	    "insertedId" : ObjectId("60dcedca0c229cf748c1e48d")
	}

	CUANDO LA OPERACION EN BULK (Mas de un elemento) El objeto cambia el insertedId por un array: 

	{
    	"acknowledged" : true,
	    "insertedIds" : [ 
	        ObjectId("60dcee910c229cf748c1e48e"), 
	        ObjectId("60dcee910c229cf748c1e48f")
	    ]
	}

	--- 

	 [ MongoDB ] <-- (Op. CREAR) --> [ API: NodeJS ]

	 API: 
	 	Si me llega del motor de mongoDB el objeto con propiedad: 
		 	- insertedId o insertedIds
		 	- Deduzco que se inserto datos con exito
		 	- Response de la API: 
		 		{ success: "Se ingreso los datos correctamente" }

	 	Caso contrario
	 		{ error: "No se ingreso los datos correctamente."}

	---- 


	OPERACION DE READ: 

		- Niveles de profundidad de un objeto: 

		Objeto: { 
			prop1: "value1",
			---- N1

			prop2: "value2",
			prop3: {
				subProp1: "valueSub1",
				---- N2

				subProp2: {
					subSubProp1: "subSubVal1"
					---- N3 
				}
			}
		}

		N1 - DE BUSQUEDA: 
		db.getCollection('clientes').find({
			nombre: "Alex"
		})

		N2 - DE BUSQUEDA: 
		db.getCollection('compras').find({
		    'producto.nombre': "Manzana"
		})

		N3 - DE BUSQUEDA:
		db.getCollection('compras').find({
		    'producto.categoria.nombre': "frutas"
		})

		Nm - DE BUSQUEDA:
		db.getCollection('compras').find({
		    'obj1.subObj1.subSubObj1.[...].mSubObjeto1.mProp1': "mValor1"
		})


	OPERACIONES DE UPDATE: 

		db.collection.updateOne(<filter>, <update>, <options>)
		db.collection.updateMany(<filter>, <update>, <options>)
		db.collection.replaceOne(<filter>, <update>, <options>)


		OP: updateOne 
			- Cual es el documento que quiero actualizar
			- Y por que propiedades debo tomar para actualizar

			OBJETO INICIAL:

			{
			    "_id" : ObjectId("60dba6072782d7c6ac55ea20"),
			    "nombre" : "Juan",
			    "tipo" : "empresa"
			}

			CAMBIO: 

			db.clientes.updateOne(
				{
					"_id": ObjectId("60dba6072782d7c6ac55ea20")
				},
				{
					$set: {
						"nombre":"Juan II"
					}
			})

	---

	OBJ Resultado: 

	TRES POSIBILIDADES: 
	1. Encontro el registro (matchedCount), luego lo modifico (modifiedCount)

		{
		    "acknowledged" : true,
		    "matchedCount" : 1.0,
		    "modifiedCount" : 1.0
		}

	2. Encontro el registro, pero no modifico
	3. No encontro el registro entonces no modifico

	* Utilizariamos: modifiedCount y verificamos si es "1" para saber que el update fue exitoso
	* Si modifiedCount es "0" entonces arrojamos un error en el update 


 OPERACION DE DELETE: 

 	db.collection.deleteMany()
	db.collection.deleteOne()

	- Podemos borrar un registro por sus propiedades
		- Borrar el documento por _id

		db.productos.deleteOne({"_id" : ObjectId("60dba4c62782d7c6ac55e9cc")})

	- Cuando ejecutamos la operacion obtenemos como respuesta el siguiente objeto: 

	{
	    "acknowledged" : true,
	    "deletedCount" : 1.0
	}

	- Para abstraer la respuesta de la API vamos a verificar si deletedCount es 1 entonces se borro correctamente si es 0. Quiere decir que no borro registro


	--- 

	EJERCICIO RAPIDO: 

		1. Crear una base de datos usuarios
			
			colecciones:
			
			- personas
			- proveedores

			Obs: Proveedores y personas tendran en comun solo el campo nombre

		2.  -> Schema para Personas
			-> Schema de proveedores

		3.  -> Crear una operacion para insertar persona 
			-> Buscar persona por X, Y propiedad 
			-> Actualizar una persona por X propiedad 
			-> Eliminar una persona por Y propiedad


		Personas: 
			(nombre, documento, edad)

		Schema: 
			Personas: {
				nombre: String, 
				documento: String,
				edad: Int32
			}

			Insertar un objeto: 

			{
				"nombre":"Alex",
				"apellido":""
			}

		Proveedores: {
			nombre: String, 
			rut: Int32,
			razonSocial: String
		}

----------

		Personas: 

		db.personas.insertOne({
			"nombre":"Alex",
			"documento":"123213",
			edad: 29
		})

		Proveedores: 

		db.proveedores.insertOne({
			"nombre":"Alex",
			"rut":20123213213,
			"razonSocial": "Alex SRL"
		})